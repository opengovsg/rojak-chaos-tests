{
  "Comment": "State machine for the RDS brute forcing chaos experiment",
  "StartAt": "Parallel",
  "States": {
    "Parallel": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "WaitForInjection",
          "States": {
            "WaitForInjection": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ssm:putParameter.waitForTaskToken",
              "HeartbeatSeconds": 600,
              "TimeoutSeconds": 300,
              "Parameters": {
                "Name": "/chaosexperiments/rds/injection/tasktoken",
                "Value.$": "$$.Task.Token",
                "Overwrite": true
              },
              "ResultPath": "$.result",
              "Next": "PutGuardDutyTriggeredToken"
            },
            "PutGuardDutyTriggeredToken": {
              "Type": "Task",
              "Next": "Success",
              "Parameters": {
                "Name": "/chaosexperiments/rds/guardduty/tasktoken",
                "Value.$": "$$.Task.Token",
                "Overwrite": true
              },
              "Resource": "arn:aws:states:::aws-sdk:ssm:putParameter.waitForTaskToken"
            },
            "Success": {
              "Type": "Succeed"
            }
          }
        },
        {
          "StartAt": "Wait",
          "States": {
            "Wait": {
              "Type": "Wait",
              "Seconds": 15,
              "Next": "Lambda Invoke"
            },
            "Lambda Invoke": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "{{FnArn}}:$LATEST"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                },
                {
                  "ErrorEquals": [
                    "States.Timeout",
                    "Lambda.Unknown"
                  ],
                  "IntervalSeconds": 1,
                  "Comment": "Retry on timeout for 1 hour",
                  "MaxAttempts": 3
                }
              ],
              "TimeoutSeconds": 905,
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.Timeout"
                  ],
                  "Next": "Fail"
                }
              ],
              "End": true
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        }
      ],
      "End": true
    }
  }
}
